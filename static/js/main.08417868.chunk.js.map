{"version":3,"sources":["components/Navbar.js","components/Jumbotron.js","components/Character.js","components/PlayingField.js","components/StartOver.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","correct","className","this","props","score","topScore","Component","Jumbotron","Character","src","image","alt","name","data-selected","selected","data-id","id","PlayingField","characters","map","character","onClick","imageClicked","StartOver","isOpen","showModal","tryingToClose","closeModal","setState","prevProps","tabIndex","role","type","data-dismiss","aria-label","aria-hidden","App","clicked","random","includes","endRound","push","shuffleImages","temp","copy","i","length","j","Math","floor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08417868.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\n\r\nclass Navbar extends Component {\r\n  state = {\r\n    correct: \"\"\r\n  };\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n          <div className=\"mb-0 h1\">Tricky Clicky</div>\r\n          <div className=\"response\">            \r\n            <span>{this.props.correct}</span>\r\n          </div>\r\n          <div className=\"score\">\r\n            <span>Score: {this.props.score} | </span>\r\n            <span>Top Score: {this.props.topScore}</span>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Jumbotron extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"jumbotron jumbotron-fluid\">\r\n        <div className=\"container\">\r\n          <h1 className=\"display-4\">Tricky Clicky Game</h1>\r\n          <p className=\"lead\">\r\n            Click on an image to earn points, but don't click on any more than\r\n            once!\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Jumbotron;","import React from 'react';\r\n\r\nfunction Character(props) {\r\n    return (\r\n        <img className=\"img\" src={props.image} alt={props.name} data-selected={props.selected} data-id={props.id} />\r\n    );\r\n\r\n}\r\n\r\nexport default Character;","import React, { Component } from \"react\";\r\nimport Character from \"./Character.js\";\r\n\r\nclass PlayingField extends Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n            <div className=\"row\">\r\n                {this.props.characters.map(character => (\r\n                    <div className=\"card\" onClick={() => this.props.imageClicked(character.id)}>\r\n                    <Character\r\n                    name={character.name}\r\n                    image={character.image}\r\n                    selected={character.selected}\r\n                    id={character.id}\r\n                    />\r\n                    </div>\r\n                ))}  \r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayingField;\r\n","import React, { Component } from \"react\";\r\n\r\nclass StartOver extends Component {\r\n  state = {\r\n    isOpen: this.props.showModal,\r\n    tryingToClose: false\r\n  }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.showModal !== this.props.showModal) {\r\n            if (this.state.tryingToClose === false){\r\n                this.setState({isOpen: this.props.showModal});\r\n            } else{\r\n                this.setState({tryingToClose: false});\r\n            }\r\n        }\r\n    }\r\n    \r\n  closeModal = () => {\r\n    this.setState({tryingToClose: true});\r\n    this.setState({isOpen: false});\r\n    \r\n   }\r\n\r\n  render() {\r\n    if (this.state.isOpen) {\r\n      return (\r\n        <div\r\n            className=\"modal\"\r\n            id=\"startOverModal\"\r\n            tabIndex=\"-1\"\r\n            role=\"dialog\"\r\n          >\r\n            <div className=\"modal-dialog\" role=\"document\">\r\n              <div className=\"modal-content\">\r\n                <div className=\"modal-header\">\r\n                  <h5 className=\"modal-title\">Round Over</h5>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"close\"\r\n                    data-dismiss=\"modal\"\r\n                    aria-label=\"Close\"\r\n                    onClick={this.closeModal}\r\n                  >\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                  </button>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                  <p>You Already Picked This One. Try Again.</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default StartOver;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport PlayingField from \"./components/PlayingField\";\nimport StartOver from \"./components/StartOver\";\nimport characters from \"./characters.json\";\n\nclass App extends Component {\n  state = {\n    characters,\n    clicked: [],\n    random: [],\n    score: 0,\n    topScore: 0,\n    correct: \"\",\n    showModal: false\n  };\n  \n  componentDidMount(){\n    this.setState({random: characters});\n  }\n\n  imageClicked = id => {\n    if (this.state.clicked.includes(id)) {\n      this.setState({correct: \"Wrong!\"});\n      this.setState({showModal: true});\n      this.endRound();\n    }\n    else {\n      this.state.clicked.push(id);\n      this.setState({correct: \"Correct!\"});\n      this.setState({score: this.state.score + 1});\n      this.setState({showModal: false});\n    }\n\n    this.shuffleImages();\n  }\n\n  shuffleImages = () => {\n    const copy = this.state.characters;\n\n    let i = copy.length;\n    let j = 0;\n    let temp;\n\n    while (i--) {\n      j = Math.floor(Math.random() * (i + 1));\n\n      temp = copy[i];\n      copy[i] = copy[j];\n      copy[j] = temp;\n    }\n\n    this.setState({random: copy});\n  }\n\n  endRound = () => {\n    this.setState({score: 0});\n    this.setState({clicked: []});\n    \n    if (this.state.score > this.state.topScore) {\n      this.setState({topScore: this.state.score});\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <Navbar score={this.state.score} topScore={this.state.topScore} correct={this.state.correct}></Navbar>\n        <Jumbotron></Jumbotron>\n        <StartOver  showModal={this.state.showModal} imageClicked={this.imageClicked}></StartOver>\n        <PlayingField characters={this.state.random} imageClicked={this.imageClicked}></PlayingField>\n        \n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}